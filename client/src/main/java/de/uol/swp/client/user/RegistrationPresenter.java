package de.uol.swp.client.user;

import com.google.common.base.Strings;
import com.google.inject.Inject;
import de.uol.swp.client.AbstractPresenter;
import de.uol.swp.client.user.event.RegistrationCanceledEvent;
import de.uol.swp.client.user.event.RegistrationErrorEvent;
import de.uol.swp.common.user.UserDTO;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import lombok.NoArgsConstructor;
import org.greenrobot.eventbus.EventBus;

/**
 * Manages the registration window
 *
 * @see de.uol.swp.client.AbstractPresenter
 *
 */
@NoArgsConstructor
public class RegistrationPresenter extends AbstractPresenter {
    private static final RegistrationCanceledEvent registrationCanceledEvent = new RegistrationCanceledEvent();

    @FXML
    private TextField loginField;

    @FXML
    private PasswordField passwordField1;

    @FXML
    private PasswordField passwordField2;

    @FXML
    private TextField emailField;

    /**
     * Constructor
     *
     * @param eventBus The EventBus set in ClientModule
     * @param userService The injected ClientUserService
     * @see de.uol.swp.client.di.ClientModule
     */
    @Inject
    public RegistrationPresenter(EventBus eventBus, ClientUserService userService) {
        setEventBus(eventBus);
    }

    /**
     * Method called when the cancel button is pressed
     * <p>
     * This Method is called when the cancel button is pressed. It posts an instance
     * of the RegistrationCanceledEvent to the EventBus the SceneManager is subscribed
     * to.
     *
     * @param event The ActionEvent generated by pressing the register button
     * @see RegistrationCanceledEvent
     * @see de.uol.swp.client.SceneManager
     */
    @FXML
    void onCancelButtonPressed(ActionEvent event) {
        eventBus.post(registrationCanceledEvent);
    }

    /**
     * Method called when the exit button is pressed
     * <p>
     * This method is called when the exit button is pressed. It terminates the application
     * by calling System.exit(0), which indicates a normal termination.
     *
     * @param event The ActionEvent generated by pressing the exit button
     */
    @FXML
    void onExitButtonPressed(ActionEvent event) {
        System.exit(0);
    }

    /**
     * Method called when the register button is pressed
     * <p>
     * This Method is called when the register button is pressed. It posts an instance
     * of the RegistrationErrorEvent to the EventBus the SceneManager is subscribed
     * to, if one of the fields is empty or the password fields are not equal.
     * If everything is filled in correctly the user service is requested to create
     * a new user.
     *
     * @param event The ActionEvent generated by pressing the register button
     * @see RegistrationErrorEvent
     * @see de.uol.swp.client.SceneManager
     * @see de.uol.swp.client.user.UserService
     *
     */
    @FXML
    void onRegisterButtonPressed(ActionEvent event) {
        if (Strings.isNullOrEmpty(loginField.getText())){
            eventBus.post(new RegistrationErrorEvent("Bitte Nutzername eingeben"));
        } else if (!passwordField1.getText().equals(passwordField2.getText())) {
            eventBus.post(new RegistrationErrorEvent("Passw√∂rter sind nicht gleich"));
        } else if (Strings.isNullOrEmpty(passwordField1.getText())) {
            eventBus.post(new RegistrationErrorEvent("Bitte Passwort eingeben"));
        } else if (Strings.isNullOrEmpty(emailField.getText())) {
            eventBus.post(new RegistrationErrorEvent("Bitte Email eingeben"));
        }
        else {
            userService.createUser(new UserDTO(loginField.getText(), passwordField1.getText(), emailField.getText()));
        }
    }


}
